
import 'package:grpc/grpc.dart';
import 'package:nakama_client/src/client/BaseClientMixing.dart';
import 'package:nakama_client/src/generated/proto/api.pb.dart';
import 'package:nakama_client/src/generated/proto/apigrpc.pbgrpc.dart';
import 'package:nakama_client/src/generated/proto/google/protobuf/empty.pbserver.dart';

abstract class BaseClientInterface {
    ResponseFuture<Account> getAccount();
ResponseFuture<void> updateAccount(String timezone,String username,String displayName,String avatarUrl,String langTag,String location);
ResponseFuture<Session> authenticateCustom(String id,bool create,String username);
ResponseFuture<Session> authenticateGameCenter(String bundleId,String timestampSeconds,String salt,String signature,String publicKeyUrl,String playerId,bool create,String username);
ResponseFuture<void> unlinkDevice(String id);
ResponseFuture<void> blockFriends(List<String> ids,List<String> usernames);
ResponseFuture<LeaderboardRecordList> listLeaderboardRecords(String leaderboardId,List<String> ownerIds, limit,String cursor,String expiry);
ResponseFuture<void> deleteLeaderboardRecord(String leaderboardId);
ResponseFuture<LeaderboardRecord> writeLeaderboardRecord(String leaderboardId,String score,String subscore,String metadata);
ResponseFuture<void> joinTournament(String tournamentId);
ResponseFuture<void> importFacebookFriends(String token,bool reset);
ResponseFuture<void> deleteNotifications(List<String> ids);
ResponseFuture<NotificationList> listNotifications( limit,String cacheableCursor);
ResponseFuture<StorageObjectList> listStorageObjects(String collection,String userId, limit,String cursor);
ResponseFuture<UserGroupList> listUserGroups(String userId, limit, state,String cursor);
ResponseFuture<void> healthcheck();
ResponseFuture<Session> authenticateDevice(String id,bool create,String username);
ResponseFuture<void> linkFacebook(String token,bool sync);
ResponseFuture<void> unlinkGoogle(String token);
ResponseFuture<void> unlinkSteam(String token);
ResponseFuture<void> deleteGroup(String groupId);
ResponseFuture<void> updateGroup(String groupId,bool open,String groupId,String name,String description,String langTag,String avatarUrl);
ResponseFuture<Rpc> rpcFunc2(String id,String payload,String httpKey);
ResponseFuture<Rpc> rpcFunc(String id,unknown: body);
ResponseFuture<void> deleteStorageObjects(List<DeleteStorageObjectsRequest> objectIds);
ResponseFuture<Users> getUsers(List<String> ids,List<String> usernames,List<String> facebookIds);
ResponseFuture<Session> authenticateFacebook(String token,bool create,String username,bool sync);
ResponseFuture<void> linkGameCenter(String timestampSeconds,String salt,String signature,String publicKeyUrl,String playerId,String bundleId);
ResponseFuture<void> unlinkEmail(String password,String email);
ResponseFuture<void> unlinkGameCenter(String timestampSeconds,String salt,String signature,String publicKeyUrl,String playerId,String bundleId);
ResponseFuture<void> deleteFriends(List<String> ids,List<String> usernames);
ResponseFuture<void> addFriends(List<String> ids,List<String> usernames);
ResponseFuture<FriendList> listFriends( limit, state,String cursor);
ResponseFuture<void> joinGroup(String groupId);
ResponseFuture<void> leaveGroup(String groupId);
ResponseFuture<StorageObjects> readStorageObjects(List<ReadStorageObjectsRequest> objectIds);
ResponseFuture<StorageObjectAcks> writeStorageObjects(List<WriteStorageObjectsRequest> objects);
ResponseFuture<TournamentList> listTournaments( categoryStart, categoryEnd, startTime, endTime, limit,String cursor);
ResponseFuture<Session> authenticateEmail(String email,String password,bool create,String username);
ResponseFuture<Session> authenticateGoogle(String token,bool create,String username);
ResponseFuture<GroupList> listGroups(String name,String cursor, limit);
ResponseFuture<Group> createGroup(String avatarUrl,bool open, maxCount,String name,String description,String langTag);
ResponseFuture<GroupUserList> listGroupUsers(String groupId, limit, state,String cursor);
ResponseFuture<void> linkCustom(String id);
ResponseFuture<void> linkDevice(String id);
ResponseFuture<TournamentRecordList> listTournamentRecords(String tournamentId,List<String> ownerIds, limit,String cursor,String expiry);
ResponseFuture<LeaderboardRecord> writeTournamentRecord(String tournamentId,String score,String subscore,String metadata);
ResponseFuture<TournamentRecordList> listTournamentRecordsAroundOwner(String tournamentId,String ownerId, limit,String expiry);
ResponseFuture<void> linkGoogle(String token);
ResponseFuture<void> linkSteam(String token);
ResponseFuture<void> unlinkFacebook(String token);
ResponseFuture<void> kickGroupUsers(String groupId,List<String> userIds);
ResponseFuture<LeaderboardRecordList> listLeaderboardRecordsAroundOwner(String leaderboardId,String ownerId, limit,String expiry);
ResponseFuture<MatchList> listMatches( limit,bool authoritative,String label, minSize, maxSize,String query);
ResponseFuture<StorageObjectList> listStorageObjects2(String collection,String userId, limit,String cursor);
ResponseFuture<Session> authenticateSteam(String token,bool create,String username);
ResponseFuture<void> linkEmail(String email,String password);
ResponseFuture<void> unlinkCustom(String id);
ResponseFuture<ChannelMessageList> listChannelMessages(String channelId, limit,bool forward,String cursor);
ResponseFuture<void> addGroupUsers(String groupId,List<String> userIds);
ResponseFuture<void> promoteGroupUsers(String groupId,List<String> userIds);

}
